From 9fc25ef630a5c793b8c105e2bd094d14c24cac0f Mon Sep 17 00:00:00 2001
From: Seetharaman <sk6599@nyu.edu>
Date: Mon, 21 Nov 2016 21:45:17 +0000
Subject: [PATCH] Implement Lottery Scheduling

---
 Makefile    |  1 +
 hackbench.c |  3 ++-
 proc.c      | 23 ++++++++++++++++++++---
 proc.h      |  1 +
 syscall.c   |  2 ++
 syscall.h   |  1 +
 sysproc.c   |  8 ++++++++
 user.h      |  1 +
 usys.S      |  1 +
 9 files changed, 37 insertions(+), 4 deletions(-)

diff --git a/Makefile b/Makefile
index 5d91068..39476ea 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+        _lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/hackbench.c b/hackbench.c
index e33452a..fe2f0b5 100644
--- a/hackbench.c
+++ b/hackbench.c
@@ -73,9 +73,10 @@ static void fdpair(int fds[2])
   if (use_pipes) {
     // TODO: Implement myPipe
     //    pipe(fds[0], fds[1]);
-    if (pipe(fds) == 0)
+    if (pipe(fds) == 0) {
       fd_count += 2;
       return;
+    }
   } else {
     // This mode would not run correctly in xv6
     //if (socketpair(AF_UNIX, SOCK_STREAM, 0, fds) == 0)
diff --git a/proc.c b/proc.c
index b122e3b..7386105 100644
--- a/proc.c
+++ b/proc.c
@@ -50,6 +50,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 10;
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -146,6 +147,7 @@ fork(void)
     return -1;
   }
   np->sz = proc->sz;
+  np->tickets = proc->tickets;
   np->parent = proc;
   *np->tf = *proc->tf;
 
@@ -270,6 +272,8 @@ scheduler(void)
 {
   struct proc *p;
   int foundproc = 1;
+  int totaltickets = 0;
+  int currentticketvalue = 0;
 
   for(;;){
     // Enable interrupts on this processor.
@@ -278,12 +282,25 @@ scheduler(void)
     if (!foundproc) hlt();
     foundproc = 0;
 
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+	if(p->state != RUNNABLE)
+          continue;
+	totaltickets = totaltickets + p->tickets;
+    }
+
+    long selectedticket = random_at_most(totaltickets);
+    
+
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
-
+      if(p->tickets + currentticketvalue <= selectedticket) {
+	currentticketvalue += p->tickets;	
+	//cprintf("TicketValue : %d",currentticketvalue);
+	continue;
+      }
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -293,7 +310,6 @@ scheduler(void)
       p->state = RUNNING;
       swtch(&cpu->scheduler, proc->context);
       switchkvm();
-
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       proc = 0;
@@ -463,7 +479,8 @@ procdump(void)
       state = states[p->state];
     else
       state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
+    cprintf("%d %s %s\n", p->pid, state, p->name);
+    cprintf("My tickets : %d\n", p->tickets);
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
diff --git a/proc.h b/proc.h
index 3b9c3ac..777b721 100644
--- a/proc.h
+++ b/proc.h
@@ -66,6 +66,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;		       // Number of tickets
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 0e06ad4..849877c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..d691974 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -98,3 +98,11 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+
+int sys_settickets(void) {
+  int n;
+  if(argint(0, &n) < 0)
+    return -1;
+  proc->tickets = n;
+  return 0;
+}
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
2.9.3

